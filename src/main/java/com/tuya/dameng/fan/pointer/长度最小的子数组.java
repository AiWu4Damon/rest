package com.tuya.dameng.fan.pointer;

/**
 * @author 达蒙
 * @version 1.0
 * @date 2022/7/26 3:27 下午
 */
public class 长度最小的子数组 {


    /**
     * 给定一个含有 n 个正整数的数组和一个正整数 target 。
     *
     * 找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0
     *
     * 输入：target = 7, nums = [2,3,1,2,4,3]
     * 输出：2
     * 解释：子数组 [4,3] 是该条件下的长度最小的子数组。
     * 396893380
     * [3571,9780,8138,1030,2959,6988,2983,9220,6800,7669,2528,3994,6090,311,5683,9232,9698,1784,6543,4018,1340,3170,5097,9876,8881,6303,7964,2469,1119,9259,9429,9355,9904,2971,6240,3973,4972,1874,7037,4631,4666,7809,6878,5656,7227,1833,4772,8200,9594,9250,1881,4811,2669,7077,7531,8497,3821,5741,7488,2521,469,6108,431,3985,1641,8732,398,9934,4785,5061,4882,4819,9986,3317,2683,7800,9887,7277,5145,9537,7089,1467,5458,1598,3083,2867,9046,6089,2657,1107,2110,9020,7771,4928,848,896,558,6416,5128,9534,5410,2349,3430,4081,5996,9447,420,3514,6814,9873,1486,4576,6161,9400,2381,969,7588,2920,513,4612,4689,2870,8775,5787,2606,9221,5002,6515,5810,8611,3326,1580,3606,9445,4729,7623,4335,395,4868,8000,4069,8557,9207,1542,7,8620,3058,6822,1606,3857,141,503,9810,2869,9464,3702,4779,5942,4678,3416,2621,4710,6116,2819,5592,9227,8783,6164,3563,4957,1465,3269,2764,3359,2829,586,4145,5330,1549,3296,7842,7311,7981,3901,8132,856,2152,7367,5174,5689,5033,1459,321,2497,5488,7991,1801,9769,6373,3969,6081,4558,8560,376
     */
    public static int minSubArrayLen(int target, int[] nums) {
        int rangeMin = nums.length + 1;
        int leftInd = 0;
        int rightInd = 0;
        while (true){
            int sum = 0;
            for (int i = leftInd; i <= rightInd; i++){
                sum += nums[i];
            }
            if (sum >= target){
                if (rightInd == leftInd){
                    return 1;
                }
                rangeMin = Math.min(rangeMin, rightInd - leftInd + 1);
                if (++leftInd > rightInd){
                    rightInd++;
                }
            }else {
                rightInd++;
            }
            if (rightInd > nums.length-1){
                return rangeMin > nums.length ? 0 : rangeMin;
            }
        }
    }

    public static void main(String[] args) {
        int[] o = new int[]{16,10,28,39,10,20,30,20};

        System.out.println(minSubArrayLen(70, o));
    }
}
